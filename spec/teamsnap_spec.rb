require "spec_helper"
require "teamsnap"

RSpec.describe "teamsnap_rb" do
  let(:default_url) { TeamSnap::DEFAULT_URL }
  let(:specified_url) { "https://url-fun-zone.com" }
  let(:response) { Typhoeus::Response.new(
    code: 200, body: { :collection => { :links => [] } }.to_json
  ) }

  describe ".init" do
    it "requires token or client id and client secret" do
      expect {
        TeamSnap.init
      }.to raise_error(ArgumentError, "You must provide a :token or :client_id and :client_secret pair to '.init'")
    end

    it "initializes with default url and token auth" do
      Typhoeus.stub(%r(#{default_url})).and_return(response)

      TeamSnap.init(:token => "mytoken", :backup_cache => false)
    end

    it "requires client secret when given client id" do
      expect {
        TeamSnap.init(:client_id => "myclient")
      }.to raise_error(ArgumentError, "You must provide a :token or :client_id and :client_secret pair to '.init'")
    end

    it "initializes with default url and hmac auth" do
      Typhoeus.stub(/#{default_url}/).and_return(response)

      TeamSnap.init(
        :client_id => "myclient", :client_secret => "mysecret", :backup_cache => false
      )
    end

    it "allows url to be specified" do
      Typhoeus.stub(/#{specified_url}/).and_return(response)

      TeamSnap.init(
        :client_id => "myclient", :client_secret => "mysecret", :backup_cache => false,
        :url => specified_url
      )
    end
  end
end

RSpec.describe "teamsnap_rb", :vcr => true do
  before(:all) do
    VCR.use_cassette("apiv3-init") do
      TeamSnap.init(
        :url => ROOT_TEST_URL,
        :backup_cache => false,
        :client_id => "classic",
        :client_secret => "dont_tell_the_cops"
      )
    end
  end

  it "registers new classes via introspection of the root collection" do
    expect { TeamSnap::Team }.to_not raise_error
  end

  it "handles fetching data via queries" do
    ts = TeamSnap::Team.search(:id => 1)

    expect(ts).to_not be_empty
    expect(ts[0].id).to eq(1)
  end

  it "handles queries with no data" do
    ts = TeamSnap::Team.search(:id => 0)

    expect(ts).to be_empty
  end

  it "raises an exception when a query is invalid" do
    expect {
      TeamSnap::Team.search(:foo => :bar)
    }.to raise_error(
      ArgumentError,
      "Invalid argument(s). Valid argument(s) are [:id, :team_id, :user_id, :division_id]"
    )
  end

  it "handles executing an action via commands" do
    ms = TeamSnap::Member.disable_member(:member_id => 1)

    expect(ms).to_not be_empty
    expect(ms[0].id).to eq(1)
  end

  it "handles executing an action via commands with multiple params" do
    TeamSnap.init(
      :url => ROOT_TEST_URL,
      :backup_cache => false,
      :token => "6-classic-dont_tell_the_cops"
    )

    ms = TeamSnap::Team.invite(
      :team_id => 1, :member_id => [9, 11], :notify_as_member_id => 3,
      :introduction => "Welcome! This is our team\n ...the superstars!"
    )

    expect(ms.size).to eq(2)
    expect(ms.map(&:id)).to eq([9, 11])
    expect(ms.map(&:is_invited)).to eq([true, true])
  end

  it "raises and exception when a command is invalid" do
    expect {
      TeamSnap::Member.disable_member(:foo => :bar)
    }.to raise_error(
      ArgumentError,
      "Invalid argument(s). Valid argument(s) are [:member_id]"
    )
  end

  it "can handle errors generated by command" do
    expect {
      TeamSnap::Member.disable_member
    }.to raise_error(
      TeamSnap::Error,
      "You must provide the member_id."
    )
  end

  it "adds .find if .search is available" do
    t = TeamSnap::Team.find(1)

    expect(t.id).to eq(1)
  end

  it "raises an exception if .find returns nothing" do
    expect {
      TeamSnap::Team.find(0)
    }.to raise_error(
      TeamSnap::NotFound,
      "Could not find a TeamSnap::Team with an id of '0'."
    )
  end

  it "can follow singular links" do
    m = TeamSnap::Member.find(3)
    t = m.team

    expect(t.id).to eq(1)
  end

  it "can handle links with no data" do
    m = TeamSnap::Member.find(1)
    as = m.assignments

    expect(as).to be_empty
  end

  it "can follow plural links" do
    t = TeamSnap::Team.find(1)
    ms = t.members

    expect(ms.size).to eq(16)
  end

  it "can use bulk load" do
    cs = TeamSnap.bulk_load(:team_id => 1, :types => "team,member")

    expect(cs).to_not be_empty
    expect(cs.size).to eq(17)
    expect(cs[0]).to be_a(TeamSnap::Team)
    expect(cs[0].id).to eq(1)
    cs[3..17].each.with_index(5) do |c, idx|
      expect(c).to be_a(TeamSnap::Member)
      expect(c.id).to eq(idx)
    end
  end

  it "can send arbitrary parameters to bulk load" do
    cs = TeamSnap.bulk_load(
      :team_id => 1, :types => "member", :member__id => 67,
      :skip_parameter_validation => true
    )

    expect(cs).to_not be_empty
    expect(cs[0]).to be_a(TeamSnap::Member)
    expect(cs[0].id).to eq(67)
  end

  it "can handle an empty bulk load" do
    cs = TeamSnap.bulk_load(:team_id => 0, :types => "team,member")

    expect(cs).to be_empty
  end

  it "can handle an error with bulk load" do
    expect {
      TeamSnap.bulk_load
    }.to raise_error(
      TeamSnap::Error,
      "You must include a team_id parameter"
    )
  end

  it "adds href to items" do
    m = TeamSnap::Member.find(1)

    expect(m.href).to eq("#{ROOT_TEST_URL}/members/1")
  end

  context "supports relations with expected behaviors" do
    let(:event) { TeamSnap::Event.find(1) }

    context "when a plural relation is called" do
      it "responds with an array of objects when successful" do
        a = event.availabilities
        expect(a.size).to be > 0
        expect(a).to be_an(Array)
      end

      it "responds with an empty array when no objects exist" do
        a = event.assignments
        expect(a.size).to eq(0)
        expect(a).to be_an(Array)
      end
    end

    context "when a singular relation is called" do
      it "responds with the object if it exists" do
        a = event.team
        expect(a).to be_a(TeamSnap::Team)
      end

      it "responds with nil if it does NOT exist" do
        a = event.division_location
        expect(a).to be_a(NilClass)
      end
    end
  end
end
